require 'helper'
require 'inspec/utils/sudoers_parser'
require 'inspec/utils/sudoers_transform'
require 'parslet/rig/rspec'
require 'parslet/convenience'

describe SudoersParser do
  let(:parser) { SudoersParser.new }

  # Combine the duplicate parse methods into one
  def parse(rule)
    parser.parse(rule)
  rescue Parslet::ParseFailed => e
    puts e.parse_failure_cause.ascii_tree
    raise e
  end

  def parsestr(c)
    parse(c).to_s
  end

  def parse_file(f)
    parse(File.read(f))
  end

  describe 'basic parsing' do
    it 'handles empty files and comments' do
      _(parsestr('')).must_equal ''
      _(parsestr('# some nice comment')).must_equal '# some nice comment'
    end
  end

  describe 'value parsing' do
    describe 'key-value pairs' do
      it 'parses simple key=value' do
        result = parse('key=value')
        _(result[0][:keypair][:key].to_s).must_equal 'key'
        _(result[0][:keypair][:value].to_s).must_equal 'value'
      end

      it 'parses key with quoted value' do
        result = parse('key="quoted value"')
        _(result[0][:keypair][:key].to_s).must_equal 'key'
        _(result[0][:keypair][:value].to_s).must_equal 'quoted value'
      end

      it 'parses path-style values' do
        result = parse('secure_path="/usr/local/bin:/usr/bin"')
        _(result[0][:keypair][:key].to_s).must_equal 'secure_path'
        _(result[0][:keypair][:value].to_s).must_equal '/usr/local/bin:/usr/bin'
      end
    end
  end

  #   describe 'default entries' do
  #     describe 'basic defaults' do
  #       it 'parses defaults with and without semicolon' do
  #         result = parse('Defaults !authenticate')
  #         _(result[:default][:args].first).must_equal '!authenticate'

  #         result = parse('Defaults !authenticate;')
  #         _(result[:default][:args].first).must_equal '!authenticate'
  #       end

  #       it 'parses multiple values' do
  #         result = parse('Defaults !authenticate, timestamp_timeout=0')
  #         _(result[:default][:args]).must_include '!authenticate'
  #         _(result[:default][:args]).must_include 'timestamp_timeout=0'
  #       end
  #     end

  #     describe 'user-specific defaults' do
  #       it 'parses with and without semicolon' do
  #         result = parse('Defaults:root !authenticate')
  #         _(result[:default][:user][:identifier].to_s).must_equal 'root'
  #         _(result[:default][:args].first).must_equal '!authenticate'
  #       end

  #       it 'handles multiple values and quoted strings' do
  #         result = parse('Defaults:root secure_path="/usr/local/bin:/usr/bin"')
  #         _(result[:default][:user][:identifier].to_s).must_equal 'root'
  #         _(result[:default][:args].first).must_equal 'secure_path="/usr/local/bin:/usr/bin"'
  #       end
  #     end

  #     describe 'host-specific defaults' do
  #       let(:base_input) { 'Defaults@WEBSERVERS ssl_verify' }

  #       it 'parses with and without semicolon' do
  #         [base_input, "#{base_input};"].each do |input|
  #           result = parse(input)
  #           _(result[0][:default][:host][:identifier]).must_equal 'WEBSERVERS'
  #           _(result[0][:default][:args][0][:value]).must_equal 'ssl_verify'
  #         end
  #       end

  #       it 'handles multiple values and quoted strings' do
  #         result = parse('Defaults@WEBSERVERS ssl_verify secure_path="/usr/local/ssl/bin"')
  #         _(result[0][:default][:host][:identifier]).must_equal 'WEBSERVERS'
  #         _(result[0][:default][:args][0][:value]).must_equal 'ssl_verify'
  #         _(result[0][:default][:args][1][:value]).must_equal '/usr/local/ssl/bin'
  #       end
  #     end

  #     describe 'command-specific defaults' do
  #       let(:base_input) { 'Defaults>SERVICES !log_output' }

  #       it 'parses with and without semicolon' do
  #         [base_input, "#{base_input};"].each do |input|
  #           result = parse(input)
  #           _(result[0][:default][:command][:identifier]).must_equal 'SERVICES'
  #           _(result[0][:default][:args][0][:value]).must_equal '!log_output'
  #         end
  #       end

  #       it 'handles multiple values and quoted strings' do
  #         result = parse('Defaults>STORAGE umask=027 noexec')
  #         _(result[0][:default][:command][:identifier]).must_equal 'STORAGE'
  #         _(result[0][:default][:args][0][:value]).must_equal 'umask=027'
  #         _(result[0][:default][:args][1][:value]).must_equal 'noexec'
  #       end
  #     end
  #   end

  #   describe 'alias definitions' do
  #     describe 'user aliases' do
  #       it 'parses basic User_Alias' do
  #         result = parse('User_Alias ADMIN = root')
  #         _(result[:alias][:type]).must_equal 'User_Alias'
  #         _(result[:alias][:name]).must_equal 'ADMIN'
  #         _(parser.extract_values(result)).must_equal ['root']
  #       end

  #       it 'parses multiple user aliases' do
  #         result = parse('User_Alias ADMINS = admin, wheel')
  #         _(result[:alias][:type]).must_equal 'User_Alias'
  #         _(result[:alias][:name]).must_equal 'ADMINS'
  #         _(parser.extract_values(result)).must_equal %w[admin wheel]
  #       end

  #       it 'supports user groups in aliases' do
  #         result = parse('User_Alias WEBMASTERS = %www-admin1, %www-admin2')
  #         _(result[:alias][:type]).must_equal 'User_Alias'
  #         _(result[:alias][:name]).must_equal 'WEBMASTERS'
  #         _(parser.extract_values(result)).must_equal ['%www-admin1', '%www-admin2']
  #       end
  #     end

  #     describe 'host aliases' do
  #       it 'parses basic Host_Alias' do
  #         result = parse('Host_Alias WEBSERVERS = www1, www2')
  #         _(result[0][:alias][:type]).must_equal 'Host_Alias'
  #         _(result[0][:alias][:name]).must_equal 'WEBSERVERS'
  #         _(result[0][:alias][:values]).must_equal %w[www1 www2]
  #       end

  #       it 'handles IP addresses in host aliases' do
  #         result = parse('Host_Alias NETWORKS = 192.168.0.0/24, 10.0.0.0/8')
  #         _(result[0][:alias][:values]).must_equal ['192.168.0.0/24', '10.0.0.0/8']
  #       end
  #     end

  #     describe 'command aliases' do
  #       it 'parses basic Cmnd_Alias' do
  #         result = parse('Cmnd_Alias SERVICES = /usr/sbin/service, /bin/systemctl')
  #         _(result[0][:alias][:type]).must_equal 'Cmnd_Alias'
  #         _(result[0][:alias][:name]).must_equal 'SERVICES'
  #         _(result[0][:alias][:values]).must_equal ['/usr/sbin/service', '/bin/systemctl']
  #       end

  #       it 'handles command arguments' do
  #         result = parse('Cmnd_Alias DOCKER = /usr/bin/docker pull, /usr/bin/docker run')
  #         _(result[0][:alias][:values]).must_equal ['/usr/bin/docker pull', '/usr/bin/docker run']
  #       end

  #       it 'parses forbidden commands' do
  #         result = parse('Cmnd_Alias FORBIDDEN = !/bin/systemctl')
  #         _(result[:alias][:type]).must_equal 'Cmnd_Alias'
  #         _(result[:alias][:name]).must_equal 'FORBIDDEN'
  #         _(parser.extract_values(result)).must_equal ['!/bin/systemctl']
  #       end
  #     end

  #     describe 'runas aliases' do
  #       it 'parses basic Runas_Alias' do
  #         result = parse('Runas_Alias DBA = oracle, postgres')
  #         _(result[:alias][:type]).must_equal 'Runas_Alias'
  #         _(result[:alias][:name]).must_equal 'DBA'
  #         _(parser.extract_values(result)).must_equal %w[oracle postgres]
  #       end

  #       it 'handles group references' do
  #         result = parse('Runas_Alias WEBOPS = %www-data, %nginx')
  #         _(result[:alias][:type]).must_equal 'Runas_Alias'
  #         _(result[:alias][:name]).must_equal 'WEBOPS'
  #         _(parser.extract_values(result)).must_equal ['%www-data', '%nginx']
  #       end
  #     end
  #   end
  # end

  # describe SudoersTransform do
  #   let(:transform) { SudoersTransform.new }

  #   def parse(c)
  #     SudoersTransform.new.apply(SudoersParser.new.parse(c))
  #   end

  #   it 'transforms an empty file' do
  #     _(parse('')).must_equal ''
  #   end

  #   describe 'default transformations' do
  #     it 'transforms defaults with and without semicolon' do
  #       parsed = parse('Defaults !authenticate')
  #       result = transform.apply(parsed)
  #       _(result).must_be_kind_of SudoersTransform::Default
  #       _(result.args).must_include '!authenticate'
  #     end

  #     it 'transforms user-specific defaults with and without semicolon' do
  #       parsed = parse('Defaults:root !authenticate')
  #       result = transform.apply(parsed)
  #       _(result).must_be_kind_of SudoersTransform::Default
  #       _(result.user).must_equal 'root'
  #       _(result.args).must_include '!authenticate'
  #     end

  #     describe 'command and host transformations' do
  #       it 'transforms host-specific defaults' do
  #         parsed = parse('Defaults@WEBSERVERS ssl_verify')
  #         result = transform.apply(parsed)
  #         _(result).must_be_kind_of SudoersTransform::Default
  #         _(result.host).must_equal 'WEBSERVERS'
  #         _(result.args).must_include 'ssl_verify'
  #       end

  #       it 'transforms command-specific defaults' do
  #         parsed = parse('Defaults>SERVICES !log_output')
  #         result = transform.apply(parsed)
  #         _(result).must_be_kind_of SudoersTransform::Default
  #         _(result.command).must_equal 'SERVICES'
  #         _(result.args).must_include '!log_output'
  #       end
  #     end
  # end
end
